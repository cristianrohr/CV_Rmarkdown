p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
#heritas.out.genusFULL <- subset_taxa(heritas.cg.outgroups.rarefied.filtered, !is.na(Genus) & !Genus %in% c("", "uncharacterized", "g__"))
heritas.out.genusFULL <- tax_glom(heritas.cg.outgroups.rarefied.filtered, "Genus", NArm = TRUE)
heritas.out.genusFULL.ra <- transform_sample_counts(heritas.out.genusFULL, function(x){x / sum(x)})
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- heritas.out.genusFULL.ra
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- heritas.completo.genus.ra
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
dist = "horn"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "REFERENCIA", color="REFERENCIA")
}, psotus, dist)
names(plist) <- ord_meths
pdataframe = ldply(plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("Axis_1", "Axis_2")
return(cbind(df, x$data))
})
names(pdataframe)[1] = "method"
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- heritas.cg.outgroups.rarefied.filtered
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
dist = "horn"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "REFERENCIA", color="REFERENCIA")
}, psotus, dist)
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- heritas.cg.outgroups.rarefied.filtered
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
#psotus <- heritas.cg.outgroups.rarefied.filtered
psotus <- heritas.completo.ra
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
#dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
dist_methods <- c("bray", "horn")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
#psotus <- heritas.cg.outgroups.rarefied.filtered
psotus <- heritas.completo.ra
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
#dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
dist_methods <- c("bray", "horn")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
#psotus <- heritas.cg.outgroups.rarefied.filtered
psotus <- heritas.completo.genus.ra
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="REFERENCIA", shape="REFERENCIA")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=REFERENCIA, shape=REFERENCIA))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
load("preprocesaminento_finalizadoB.RData")
knitr::opts_chunk$set(echo = TRUE)
heritas.cg.rarefied.filtered
heritas.cg.genusFULL <- subset_taxa(heritas.cg.rarefied.filtered, !is.na(Genus) & !Genus %in% c("", "uncharacterized", "g__"))
heritas.cg.genusFULL <- tax_glom(heritas.cg.genusFULL, "Genus", NArm = TRUE)
heritas.cg.genusFULL.ra <- transform_sample_counts(heritas.cg.genusFULL, function(x){x / sum(x)})
data.norm <- heritas.cg.genusFULL.ra
save(data.norm, file = "robust-clustering-metagenomics-master/data/data.norm.RData")
save(data.norm, file = "robust-clustering-metagenomics-master/data/data.norm.RData")
heritas.cg.genusFULL.log <- transform_sample_counts(heritas.cg.genusFULL, function(x) log(1+x))
load("preprocesaminento_finalizadoB.RData")
knitr::opts_chunk$set(echo = TRUE)
# percDominant=1
# taxaSubsetGenus='no'
# mapBiomFile
# maxClus=10
#
# res <- robust.clustering.all.steps(path = "/home/crohr/Documentos/tfm_datcom/Analisis_DATCOM/robust-clustering-metagenomics-master/data",
#                             RDataOrBiomFile = "data.norm.RData",
#                             dataset.label = 'cristian',
#                             variable.in.PCoAgraph = "REFERENCIA")
# saveRDS(res, "res.robust.clustering.RDS")
res <- readRDS("res.robust.clusteringB.RDS")
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- res
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="cluster", shape="cluster")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(cowplot)
library(ggplot2)
library(vegan)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(rhdf5)
library(biom)
library(nlme)
library(structSSI)
library(plyr)
library(dplyr)
library(stringr)
library(knitr)
library(kableExtra)
library(DESeq2)
library(gplots)
#library(rfUtilities)
library(gridExtra)
#library(RColorBrewer)
library(data.table)
# library(shiny)
# library(miniUI)
# library("directlabels")
# library("clustsig")
# library("ellipse")
library(microbiome)
#library(ggthemr)
library(caret)
#ggthemr('fresh')
# Funciones para cargar archivos .biom
source("./src/aux_functions.R")
dist_methods <- c("jsd", "wunifrac", "bray", "horn", "kulczynski")
plist <- vector("list", length(dist_methods))
names(plist) = dist_methods
psotus <- res
for( i in dist_methods ){
# Calculate distance matrix
iDist <- phyloseq::distance(psotus, method=i)
# Calculate ordination
iMDS  <- ordinate(psotus, "PCoA", distance=iDist)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(psotus, iMDS, color="cluster", shape="cluster")
# Add title to each plot
p <- p + ggtitle(paste("PCoA using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
library(plyr)
df = ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p = ggplot(df, aes(Axis.1, Axis.2, color=cluster, shape=cluster))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~distance, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p = p + ggtitle("PCoA on various distance metrics for Heritas CG dataset")
p
dist = "horn"
ord_meths = c("MDS", "DCA", "CCA", "RDA", "NMDS")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "cluster", color="cluster")
}, psotus, dist)
names(plist) <- ord_meths
pdataframe = ldply(plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("Axis_1", "Axis_2")
return(cbind(df, x$data))
})
names(pdataframe)[1] = "method"
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=cluster, shape=cluster))
p = p + geom_point(size=3, alpha=0.5)
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
# ============================================================
# Tutorial on drawing a taxa plot using ggplot2
# by Umer Zeeshan Ijaz (http://userweb.eng.gla.ac.uk/umer.ijaz)
# =============================================================
abund_table<-t(otu_table(res))
# Obtengo los nombres de la taxa
nombres <- tax_table(res)[,6]
colnames(abund_table) <- nombres
meta_table<-sample_data(res)
#Just a check to ensure that the samples in meta_table are in the same order as in abund_table
meta_table<-meta_table[rownames(abund_table),]
#Get grouping information
grouping_info <- data.frame(row.names=rownames(abund_table), meta_table$cluster)
# > head(grouping_info)
# X1 X2 X3
# T_2_1   T  2  1
# T_2_10  T  2 10
# T_2_12  T  2 12
# T_2_2   T  2  2
# T_2_3   T  2  3
# T_2_6   T  2  6
#Apply proportion normalisation
x<-abund_table/rowSums(abund_table)
x<-x[,order(colSums(x),decreasing=TRUE)]
#Extract list of top N Taxa
N<-21
taxa_list<-colnames(x)[1:N]
#remove "__Unknown__" and add it to others
taxa_list<-taxa_list[!grepl("Unknown",taxa_list)]
N<-length(taxa_list)
#Generate a new table with everything added to Others
new_x<-data.frame(x[,colnames(x) %in% taxa_list],Others=rowSums(x[,!colnames(x) %in% taxa_list]))
#You can change the Type=grouping_info[,1] should you desire any other grouping of panels
df<-NULL
for (i in 1:dim(new_x)[2]){
tmp<-data.frame(row.names=NULL,Sample=rownames(new_x),Taxa=rep(colnames(new_x)[i],dim(new_x)[1]),Value=new_x[,i],Type=grouping_info[,1])
if(i==1){df<-tmp} else {df<-rbind(df,tmp)}
}
colours <- c("#F0A3FF", "#0075DC", "#993F00","#4C005C","#2BCE48","#FFCC99","#808080","#94FFB5","#8F7C00","#9DCC00","#C20088","#003380","#FFA405","#FFA8BB","#426600","#FF0010","#5EF1F2","#00998F","#740AFF","#990000","#FFFF00");
library(ggplot2)
p<-ggplot(df,aes(Sample,Value,fill=Taxa))+geom_bar(stat="identity")+facet_grid(. ~ Type, drop=TRUE,scale="free",space="free_x")
p<-p+scale_fill_manual(values=colours[1:(N+1)])
p<-p+theme_bw()+ylab("Proportions")
p<-p+ scale_y_continuous(expand = c(0,0))+theme(strip.background = element_rect(fill="gray85"))+theme(panel.margin = unit(0.3, "lines"))
p<-p+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
#pdf("TAXAplot.pdf",height=6,width=21)
print(p)
#dev.off()
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
data <- as.data.frame(t(otu_table(res)))
data$Clase <- factor(sample_data(res)$cluster)
View(data)
# Load Dataset
X_train <- data[,1:(ncol(data)-1)]
y_train <- data[,ncol(data)]
#10 folds repeat 3 times
control <- trainControl(method='repeatedcv',
number=10,
repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
# Number randomely variable selected is mtry
mtry <- sqrt(ncol(X_train))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(Clase~.,
data=data,
preProcess = c("center","scale"),
method='rf',
metric='Accuracy',
ntree = 5000,
tuneGrid=tunegrid,
trControl=control)
print(rf_default)
# Otra forma
RF_state_classify <- randomForest( x=data[,1:(ncol(data)-1)] , y=data[ , ncol(data)] , ntree=501, importance=TRUE, proximities=TRUE )
# Otra forma
RF_state_classify <- randomForest( x=data[,1:(ncol(data)-1)] , y=data[ , ncol(data)] , ntree=5000, importance=TRUE, proximities=TRUE )
RF_state_classify
par(mfrow=c(1,2))
RF_state_classify_imp <- as.data.frame( RF_state_classify$importance )
RF_state_classify_imp$features <- rownames( RF_state_classify_imp )
RF_state_classify_imp_sorted <- arrange( RF_state_classify_imp  , dplyr::desc(MeanDecreaseAccuracy)  )
barplot(RF_state_classify_imp_sorted$MeanDecreaseAccuracy, ylab="Mean Decrease in Accuracy (Variable Importance)", main="RF Classification Variable Importance Distribution")
barplot(RF_state_classify_imp_sorted[1:10,"MeanDecreaseAccuracy"], names.arg=RF_state_classify_imp_sorted[1:10,"features"] , ylab="Mean Decrease in Accuracy (Variable Importance)", las=2, main="Classification RF")
data
data <- as.data.frame(t(otu_table(res)))
colnames(data) <- tax_table(res)[,6]
data$Clase <- factor(sample_data(res)$cluster)
View(data)
X_train <- data[,1:(ncol(data)-1)]
y_train <- data[,ncol(data)]
#10 folds repeat 3 times
control <- trainControl(method='repeatedcv',
number=10,
repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
# Number randomely variable selected is mtry
mtry <- sqrt(ncol(X_train))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(Clase~.,
data=data,
preProcess = c("center","scale"),
method='rf',
metric='Accuracy',
ntree = 5000,
tuneGrid=tunegrid,
trControl=control)
print(rf_default)
# Otra forma
RF_state_classify <- randomForest( x=data[,1:(ncol(data)-1)] , y=data[ , ncol(data)] , ntree=5000, importance=TRUE, proximities=TRUE )
RF_state_classify
par(mfrow=c(1,2))
RF_state_classify_imp <- as.data.frame( RF_state_classify$importance )
RF_state_classify_imp$features <- rownames( RF_state_classify_imp )
RF_state_classify_imp_sorted <- arrange( RF_state_classify_imp  , dplyr::desc(MeanDecreaseAccuracy)  )
barplot(RF_state_classify_imp_sorted$MeanDecreaseAccuracy, ylab="Mean Decrease in Accuracy (Variable Importance)", main="RF Classification Variable Importance Distribution")
barplot(RF_state_classify_imp_sorted[1:10,"MeanDecreaseAccuracy"], names.arg=RF_state_classify_imp_sorted[1:10,"features"] , ylab="Mean Decrease in Accuracy (Variable Importance)", las=2, main="Classification RF")
bestMtry <- tuneRF(x,y, stepFactor = 1.5, improve = 1e-5, ntree = 500)
bestMtry <- tuneRF(X_train, y_train, stepFactor = 1.5, improve = 1e-5, ntree = 500)
print(bestMtry)
bestMtry <- tuneRF(X_train, y_train, stepFactor = 1.5, improve = 1e-5, ntree = 500)
print(bestMtry)
tunegrid <- expand.grid(.mtry=mtry)
rfheritasgenus <- train(Clase~.,
data=data,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
rfheritasgenus <- train(Clase~.,
data=data,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
print(rfheritasgenus)
data <- as.data.frame(t(otu_table(heritas.cg.genus.ra)))
colnames(data) <- tax_table(heritas.cg.genus.ra)[,6]
y_true <- factor(sample_data(res)$cluster)
y_pred <- predict(rf_default, data)
confusionMatrix(data = y_pred, reference = y_true)
data
ncol(data)
impRf <- varImp(mfrfheritasgenus)
View(sample_data(heritas.completo.genus.ra))
View(as.data.frame(sample_data(heritas.completo.genus.ra)))
heritas.completo.genus.ra
sample_data(heritas.completo.genus.ra)
sample_data(heritas.completo.genus.ra)$REFERENCIA
ps.pruebas.control <- subset_samples(heritas.completo.genus.ra, !REFERENCIA %in% c("CONTROL","","CONTROL_2012"))
ps.pruebas.control
ps.pruebas.enfermos <- subset_samples(heritas.completo.genus.ra, !REFERENCIA %in% c("CONTROL","","CONTROL_2012"))
ps.pruebas.enfermos
data.enfermos <- as.data.frame(t(otu_table(ps.pruebas.enfermos)))
colnames(data.enfermos) <- tax_table(ps.pruebas.enfermos)[,6]
y_pred <- predict(rf_default, data.enfermos)
y_pred
setwd("~/repos/CV_Rmarkdown")
